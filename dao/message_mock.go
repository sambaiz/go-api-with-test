// Automatically generated by MockGen. DO NOT EDIT!
// Source: message.go

package dao

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/sambaiz/go-api-with-test/model"
)

// Mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *_MockMessageRecorder
}

// Recorder for MockMessage (not exported)
type _MockMessageRecorder struct {
	mock *MockMessage
}

func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &_MockMessageRecorder{mock}
	return mock
}

func (_m *MockMessage) EXPECT() *_MockMessageRecorder {
	return _m.recorder
}

func (_m *MockMessage) Create(content string) (int64, error) {
	ret := _m.ctrl.Call(_m, "Create", content)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMessageRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockMessage) FindWithLimitOffset(limit uint64, offset uint64) ([]model.Message, error) {
	ret := _m.ctrl.Call(_m, "FindWithLimitOffset", limit, offset)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMessageRecorder) FindWithLimitOffset(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindWithLimitOffset", arg0, arg1)
}

func (_m *MockMessage) FindById(id int64) (*model.Message, error) {
	ret := _m.ctrl.Call(_m, "FindById", id)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMessageRecorder) FindById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindById", arg0)
}
